AWSTemplateFormatVersion: '2010-09-09'
Description: AWS GitHub Secrets AKM Lambda.

Parameters:

  pSnsEmailAddress:
    Type: String
    Description: Email address for send lambda errors to

  pRepoConfigBucketName:
    Type: String
    Description: S3 Bucket to create store repo access list

  pRepoConfigKey:
    Type: String
    Description: The S3 Object (file) which will contain the repo list in json format
    Default: "repos.json"

  pGitHubToken:
    Type: String
    Description: GitHub account token
    NoEcho: true

  pGitHubMachineUserName:
    Type: String
    Description: GitHub account user name associated with token

  pIamUserArn:
    Type: String
    Description: Full ARN associated with the IAM user to manage API key rotation

  pIamUserName:
    Type: String
    Description: User name of the IAM account to have API keys rotated

  pHoursToRotate:
    Type: Number
    Description: Hours between each key rotation
    Default: 12

  pGitHubSecretNameAwsKeyId:
    Type: String
    Description: The GitHub Secret Name value for the AWS Key ID
    Default: "AWS_ACCESS_KEY_ID"

  pGitHubSecretNameAwsKey:
    Type: String
    Description: The GitHub Secret Name value for the AWS Key
    Default: "AWS_SECRET_ACCESS_KEY"

Resources:

  rRepoConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      #checkov:skip=CKV_AWS_18: "Ensure the S3 bucket has access logging enabled"
      BucketName: !Ref pRepoConfigBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: Yes
        BlockPublicPolicy: Yes
        IgnorePublicAcls: Yes
        RestrictPublicBuckets: Yes
      VersioningConfiguration:
        Status: Enabled

  rSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      #checkov:skip=CKV_AWS_26: "Ensure all data stored in the SNS topic is encrypted"
      Subscription:
        - Endpoint: !Ref pSnsEmailAddress
          Protocol: email

  rSsmScriptAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "GHSAKM-${pIamUserName}"
      AlarmDescription: "Lambda errors during execution"
      Namespace: "AWS/Lambda"
      MetricName: "Errors"
      Dimensions:
      - Name: "FunctionName"
        Value: !Sub "GHSAKM-${pIamUserName}"
      Statistic: "Sum"
      ComparisonOperator: "GreaterThanThreshold"
      Threshold: 1
      EvaluationPeriods: 1
      Period: 60
      Unit: "Count"
      AlarmActions:
        - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${rSnsTopic.TopicName}"

  rSsmRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "GHSAKM-AutoRotate-${pIamUserName}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AKMLambdaResources
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${pRepoConfigBucketName}'
                  - !Sub 'arn:aws:s3:::${pRepoConfigBucketName}/*'
              - Effect: 'Deny'
                Action:
                  - 's3:DeleteBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${pRepoConfigBucketName}'
              - Effect: "Allow"
                Action:
                  - 'sns:Publish'
                Resource:  !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${rSnsTopic.TopicName}"
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/OrgInventoryLambdaFunction:*"
              - Effect: Allow
                Action:
                  - iam:List*
                  - iam:CreateAccessKey
                  - iam:DeleteAccessKey
                  - iam:UpdateAccessKey
                Resource:
                - !Ref pIamUserArn

  rAkmSsmAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Name: !Sub  "GHS-AKM-${pIamUserName}"
      Content:
        description: Template for Running aws execute script that use PowerShell
        schemaVersion: '0.3'
        assumeRole: !GetAtt rSsmRole.Arn
        parameters:
          REPO_BUCKET:
            description: "S3 Bucket to create store repo access list"
            type: "String"
            default: !Reg pRepoConfigBucketName
          S3_KEY:
            description: "The S3 Object (file) which will contain the repo list in json format"
            type: "String"
            default: !Ref pRepoConfigKey
          IAM_USERNAME:
            description: "Full ARN associated with the IAM user to manage API key rotation"
            type: "String"
            default: !Ref pIamUserName
          GITHUB_USER:
            description: "GitHub account user name associated with token"
            type: "String"
            default: !Ref pGitHubMachineUserName
          GITHUB_USER_TOKEN:
            description: "GitHub account personal access token"
            type: "String"
            default: !Ref pGitHubToken
          GITHUB_SECRET_NAME_ACCESS_KEY_ID:
            description: "The GitHub Secret Name value for the AWS Key ID"
            type: "String"
            default: !Ref pGitHubSecretNameAwsKeyId
          GITHUB_SECRET_NAME_ACCESS_KEY:
            description: "The GitHub Secret Name value for the AWS Key"
            type: "String"
            default: !Ref pGitHubSecretNameAwsKey
        mainSteps:
          - name: ExecuteCode
            action: 'aws:executeScript'
            inputs:
              Runtime: PowerShell Core 6.0
              InputPayload:
                REPO_BUCKET: "{{REPO_BUCKET}}"
                S3_KEY: "{{S3_KEY}}"
                IAM_USERNAME: "{{IAM_USERNAME}}"
                GITHUB_USER: "{{GITHUB_USER}}"
                GITHUB_USER_TOKEN: "{{GITHUB_USER_TOKEN}}"
                GITHUB_SECRET_NAME_ACCESS_KEY_ID: "{{GITHUB_SECRET_NAME_ACCESS_KEY_ID}}"
                GITHUB_SECRET_NAME_ACCESS_KEY: "{{GITHUB_SECRET_NAME_ACCESS_KEY}}"
              Script: |-
                $ErrorActionPreference = 'Stop';
                Install-Module AWS.Tools.IdentityManagement -confirm:$false -Force
                Install-Module PSSodium -confirm:$false -Force
                Install-Module AWS.Tools.S3 -Confirm:$false -Force
                Import-Module PSSodium;
                Import-Module AWS.Tools.IdentityManagement;
                Import-Module AWS.Tools.S3

                $payload = $env:InputPayload | ConvertFrom-Json;
                $REPO_BUCKET= $payload.REPO_BUCKET
                $S3_KEY= $payload.S3_KEY
                $IAM_USERNAME= $payload.IAM_USERNAME
                $GITHUB_USER= $payload.GITHUB_USER
                $GITHUB_USER_TOKEN= $payload.GITHUB_USER_TOKEN
                $GITHUB_SECRET_NAME_ACCESS_KEY_ID= $payload.GITHUB_SECRET_NAME_ACCESS_KEY_ID
                $GITHUB_SECRET_NAME_ACCESS_KEY= $payload.GITHUB_SECRET_NAME_ACCESS_KEY
                # Deletes all IAM Access keys
                function Delete-IamUserAccessKeys {
                  PARAM([string]$IamUserName)
                  $AccessKeys = Get-IamAccessKey -UserName $IamUserName
                  if($AccessKeys.Count -gt 0){
                    foreach ($accesskey in $AccessKeys){
                      Remove-IAMAccessKey -AccessKeyId $accesskey.AccessKeyId -UserName $IamUserName -Force -Verbose
                    }
                  }
                }

                function Set-RepoSecret {
                    [CmdletBinding()]
                    Param(
                        [string]$repoOwner, [string]$repoName,
                        [string]$keyId, [string]$SecretValue,
                        [string]$SecretName, [string]$GitHubToken,
                        [string]$GitHubUser
                    )
                        $token = "$($GitHubUser):$($GitHubToken)"
                        $base64Token = [System.Convert]::ToBase64String([char[]]$token)
                        $headers = @{Authorization = 'Basic {0}' -f $base64Token};
                        $repoPutSecretURL = 'https://api.github.com/repos/'+ $repoOwner + '/'+ $repoName + '/actions/secrets/'+ $SecretName
                        $parameters = @{"encrypted_value" = $SecretValue; "key_id" = $keyId} | ConvertTo-Json
                        $response = Invoke-RestMethod -Headers $headers -Uri $repoPutSecretURL -Method Put -Body $parameters
                        return $response
                }

                function Get-GitHubRepoPublicKey {
                  [CmdletBinding()]
                  Param(
                    [string]$repoOwner, [string]$repoName, [string]$GitHubToken,[string]$GitHubUser
                    )
                  $token = "$($GitHubUser):$($GitHubToken)"
                  $base64Token = [System.Convert]::ToBase64String([char[]]$token)
                  $headers = @{Authorization = 'Basic {0}' -f $base64Token};
                  $url = "https://api.github.com/repos/$repoOwner/$repoName/actions/secrets/public-key"
                  $response = Invoke-RestMethod -Headers $headers -Uri $url
                  return $response
                }

                Delete-IamUserAccessKeys -IamUserName $IAM_USERNAME
                $IamNewAccessKey = New-IAMAccessKey -UserName $IAM_USERNAME

                Read-S3Object -BucketName $REPO_BUCKET -Key $S3_KEY -File $S3_KEY
                $Repos = (Get-Content $S3_KEY | ConvertFrom-Json).Repos

                foreach($repo in $Repos){
                  Write-Host "Updating $($repo.Name) in $($repo.Owner) org/profile"
                  $key_response = Get-GitHubRepoPublicKey -repoOwner $repo.Owner -repoName $repo.Name -GitHubToken $GITHUB_USER_TOKEN -GitHubUser $GITHUB_USER
                  $keyId = $key_response.key_id
                  $key = $key_response.key
                  $repoEncryptedStringAccessKey = ConvertTo-SodiumEncryptedString -Text $IamNewAccessKey.SecretAccessKey -PublicKey $key
                  $repoEncryptedStringAccessKeyId = ConvertTo-SodiumEncryptedString -Text $IamNewAccessKey.AccessKeyId -PublicKey $key

                  Set-RepoSecret -repoOwner $repo.Owner -repoName $repo.Name -keyId $keyId -GitHubToken $GITHUB_USER_TOKEN -GitHubUser $GITHUB_USER -SecretName $GITHUB_SECRET_NAME_ACCESS_KEY -SecretValue $repoEncryptedStringAccessKey
                  Set-RepoSecret -repoOwner $repo.Owner -repoName $repo.Name -keyId $keyId -GitHubToken $GITHUB_USER_TOKEN -GitHubUser $GITHUB_USER -SecretName $GITHUB_SECRET_NAME_ACCESS_KEY_ID -SecretValue $repoEncryptedStringAccessKeyId
                }
                Write-Host "Sync Complete"

  rCloudwatchTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "GHSAKM-${pIamUserName}"
      Description: Cloudwatch event to trigger Lambda Function lambda function once an hour.
      ScheduleExpression: !Sub "rate(${pHoursToRotate} hours)" ## run every hour
      State: ENABLED
      Targets:
        - Arn: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/${rAkmSsmAutomation}
          Id: TargetFunctionV1